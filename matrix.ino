#include<misakiUTF16.h>
#include<misakiUTF16FontData.h>

#define SEin 2
#define AB 3
const uint8_t addr[4] = {7, 6, 5, 4};
#define DG 8
#define DR 9
#define CLK 10
#define WE 11
#define ALE 12
#define FONT_SIZE 8
#define NUM_PANEL 2

uint32_t disp_buf_r[2][16];
uint32_t disp_buf_g[2][16];

const uint32_t bird[2][2][32] PROGMEM = {
{{0x00007000,0x00009d40,0x00012280,0x00024080,0x00724100,0x008a8280,0x01250200,0x00820400,0x00401800,0x00400900,0x00200600,0x00182000,0x0007dd00,0x00048200,0x00048000,0x00048000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
{0x00007000,0x00009d40,0x00012280,0x00024080,0x00724100,0x008a8280,0x01250200,0x00820400,0x00401800,0x00400900,0x00200600,0x00182000,0x0007dd00,0x00048200,0x00048000,0x00048000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000}},
{{0x00000000,0x00000000,0x00000000,0x0001f000,0x00020800,0x0072f8a0,0x008d0740,0x01220040,0x00801180,0x00400a00,0x00200400,0x00182200,0x0007d800,0x00048500,0x00048200,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000},
{0x00000000,0x00000000,0x00000000,0x0001f000,0x00020800,0x0072f8a0,0x008d0740,0x01220040,0x00801180,0x00400a00,0x00200400,0x00182200,0x0007d800,0x00048500,0x00048200,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000}}};

const uint32_t basyo[2][2][32] PROGMEM = {
{{0x00007000,0x00009d40,0x00012280,0x00024080,0x00724100,0x008a8280,0x01250200,0x00820400,0x00401800,0x00400900,0x00200600,0x00182000,0x0007dd00,0x00048200,0x00048000,0x001fe000,0x00291000,0x007ff800,0x00800400,0x01000200,0x01430100,0x02000100,0x02000098,0x051ff064,0x0ae0ae80,0x10004180,0x20000040,0x00000020,0x00000010,0x00000000,0x00000000,0x00000000,},
{0x00007000,0x00009d40,0x00012280,0x00024080,0x00724100,0x008a8280,0x01250200,0x00820400,0x00401800,0x00400900,0x00200600,0x00182000,0x0007dd00,0x00048200,0x00048000,0x001fe000,0x00291000,0x007ff800,0x00800400,0x01000200,0x01430100,0x02000100,0x02000098,0x051ff064,0x0ae0ae80,0x10004180,0x20000040,0x00000020,0x00000010,0x00000000,0x00000000,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x0001f000,0x00020800,0x0072f8a0,0x008d0740,0x01220040,0x00801180,0x00400a00,0x00200400,0x00182200,0x0007d800,0x00048500,0x001fe200,0x00291000,0x007ff000,0x01800800,0x22000400,0x12800200,0x0c060100,0x02000080,0x05c0f040,0x003f9eb8,0x0000a144,0x00004020,0x00000010,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x0001f000,0x00020800,0x0072f8a0,0x008d0740,0x01220040,0x00801180,0x00400a00,0x00200400,0x00182200,0x0007d800,0x00048500,0x001fe200,0x00291000,0x007ff000,0x01800800,0x22000400,0x12800200,0x0c060100,0x02000080,0x05c0f040,0x003f9eb8,0x0000a144,0x00004020,0x00000010,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,}}};

const uint32_t ohaka[2][2][32] PROGMEM = {
{{0x00000000,0x00000000,0x00000000,0x00007f80,0x000180c0,0x00030060,0x00020020,0x00020020,0x000208a0,0x00020020,0x00023038,0x00020824,0x00022834,0x0802182c,0x08020020,0x3e3a0020,0x08260020,0x08100060,0x3e0fffc0,0x41000000,0x9c800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00007f80,0x000180c0,0x00030060,0x000208a0,0x000208a0,0x000208a0,0x00020020,0x00023038,0x00020824,0x00022834,0x0002182c,0x00020020,0x003a0020,0x00260020,0x00100060,0x000fffc0,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00007f80,0x000180c0,0x00030060,0x00020020,0x00020020,0x00028820,0x00020020,0x000e0620,0x00120820,0x00160a20,0x081a0c20,0x08020020,0x3e02002e,0x08020032,0x08030004,0x3e01fff8,0x41000000,0x9c800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0xa2800000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00007f80,0x000180c0,0x00030060,0x00028820,0x00028820,0x00028820,0x00020020,0x000e0620,0x00120820,0x00160a20,0x001a0c20,0x00020020,0x0002002e,0x00020032,0x00030004,0x0001fff8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,}}};

const uint32_t kabocha[4][2][32] PROGMEM = {
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01ffff80,0x034242c0,0x06424260,0x0c727230,0x18727218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0xbf87e1fd,0xa3ffffc5,0xa303e3c5,0xa303e3c5,0xbf03e3fd,0xbffffffd,0xbffffffd,0xbffffffd,0xbe381c7d,0x9e381c79,0x86381c61,0x81ffff81,0x603c3c06,0x18000018,0x0ffffff0,0x00000000,},
{0x00000000,0x0003c000,0x0003c000,0x0003c000,0x0003c000,0x01ffff80,0x034242c0,0x06424260,0x0c727230,0x18727218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0xbf87e1fd,0xa0fc3f05,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0x98000019,0x86000061,0x81c7e381,0x603c3c06,0x18000018,0x0ffffff0,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01ffff80,0x037272c0,0x06727260,0x0c424230,0x18424218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0x80000001,0xbf87e1fd,0xa3ffffc5,0xa303e3c5,0xa303e3c5,0xbe00007d,0x9e381c79,0x86381c61,0x81ffff81,0x803c3c01,0x80000001,0x80000001,0x60000006,0x18000018,0x0ffffff0,0x00000000,},
{0x00000000,0x0003c000,0x0003c000,0x0003c000,0x0003c000,0x01ffff80,0x037272c0,0x06727260,0x0c424230,0x18424218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0x80000001,0xbf87e1fd,0xa0fc3f05,0xa0000005,0xa0000005,0xa0000005,0x98000019,0x86000061,0x81c7e381,0x803c3c01,0x80000001,0x80000001,0x60000006,0x18000018,0x0ffffff0,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01ffff80,0x034e4ec0,0x064e4e60,0x0c424230,0x18424218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0xbf87e1fd,0xa3ffffc5,0xa303e3c5,0xa303e3c5,0xbf03e3fd,0xbffffffd,0xbffffffd,0xbffffffd,0xbe381c7d,0x9e381c79,0x86381c61,0x81ffff81,0x603c3c06,0x18000018,0x0ffffff0,0x00000000,},
{0x00000000,0x0003c000,0x0003c000,0x0003c000,0x0003c000,0x01ffff80,0x034e4ec0,0x064e4e60,0x0c424230,0x18424218,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0xbf87e1fd,0xa0fc3f05,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0xa0000005,0x98000019,0x86000061,0x81c7e381,0x603c3c06,0x18000018,0x0ffffff0,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01ffff80,0x034242c0,0x06424260,0x0c4e4e30,0x184e4e18,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0x80000001,0xbf87e1fd,0xa3ffffc5,0xa303e3c5,0xa303e3c5,0xbe00007d,0x9e381c79,0x86381c61,0x81ffff81,0x803c3c01,0x80000001,0x80000001,0x60000006,0x18000018,0x0ffffff0,0x00000000,},
{0x00000000,0x0003c000,0x0003c000,0x0003c000,0x0003c000,0x01ffff80,0x034242c0,0x06424260,0x0c4e4e30,0x184e4e18,0x307e7e0c,0x6003c006,0xc0024003,0x80024001,0x8003c001,0x80000001,0x80000001,0xbf87e1fd,0xa0fc3f05,0xa0000005,0xa0000005,0xa0000005,0x98000019,0x86000061,0x81c7e381,0x803c3c01,0x80000001,0x80000001,0x60000006,0x18000018,0x0ffffff0,0x00000000,}}};

const uint32_t swim[6][2][32] PROGMEM = {
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x000ff000,0x00100800,0x003ffc00,0x00c00200,0x01000100,0x02000080,0x04406080,0x04000040,0x0b00002c,0x14f00752,0x200ff8c0,0x00005020,0x00002010,0x00000008,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x3c00700f,0xc3cf8cf0,0x00300300,0x00000000,0x8001c000,0x00000000,0x000ff000,0x00100800,0x003ffc00,0x00c00200,0x01000100,0x02000080,0x04406080,0x04000040,0x0b00002c,0x14f00752,0x200ff8c0,0x00005020,0x00002010,0x00000008,0x00000000,0x00000030,0x00000000,0x001a0000,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000098,0x16000064,0x29e00e80,0x401ff180,0x00009040,0x00002030,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x1e00381e,0xe1e7c661,0x00180180,0x00000000,0x70003800,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000098,0x16000064,0x29e00e80,0x401ff180,0x00009040,0x00002030,0x00000000,0x0000000c,0x00000000,0x0001a000,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x0007f800,0x00080400,0x001ffe00,0x00600100,0x00800080,0x01000040,0x02203041,0x0200002e,0x05800010,0x0a7803a0,0x1007fc64,0x00002818,0x00001000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00180180,0xe1e7c661,0x1e00381e,0x00000000,0x00000000,0x0e000700,0x0007f800,0x00080400,0x001ffe00,0x00600100,0x00800080,0x01000040,0x02203041,0x0200002e,0x05800010,0x0a7803a0,0x1007fc64,0x00002818,0x00001000,0x00000000,0x00000000,0x00000000,0x00000006,0x00000000,0x00001a00,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000080,0x16000058,0x29e00ea4,0x401ff180,0x0000a040,0x00004020,0x00000010,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x000c0180,0x70f3c660,0x8f00381f,0x00000000,0x01c000e0,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000080,0x16000058,0x29e00ea4,0x401ff180,0x0000a040,0x00004020,0x00000010,0x00000000,0x60000000,0x00000000,0x000001a0,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000098,0x16000064,0x29e00e80,0x401ff180,0x00009040,0x00002030,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x8f00381e,0x70f3c661,0x000c0180,0x00000000,0x0038001c,0x00000000,0x00000000,0x001fe000,0x00201000,0x007ff800,0x01800400,0x02000200,0x04000100,0x0880c100,0x08000098,0x16000064,0x29e00e80,0x401ff180,0x00009040,0x00002030,0x00000000,0x0c000000,0x00000000,0x0000001a,0x00000000,}},
{{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x000ff000,0x00100800,0x003ffc00,0x00c00200,0x01000100,0x02000080,0x04406082,0x0400005c,0x0b000020,0x14f00740,0x200ff8c8,0x00005030,0x00002000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,},
{0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xc7801c0f,0x3879e330,0x000600c0,0x00000000,0x0007000e,0x00000000,0x00000000,0x000ff000,0x00100800,0x003ffc00,0x00c00200,0x01000100,0x02000080,0x04406082,0x0400005c,0x0b000020,0x14f00740,0x200ff8c8,0x00005030,0x00002000,0x00000000,0x01800000,0x00000000,0x0d000000,0x00000000,}}};


void clear(){
    uint32_t m[NUM_PANEL] = {0}, n[NUM_PANEL] = {0};

    for(uint8_t i = 0; i < 16; i++){
        disp_buf_r[0][i] = 0;
        disp_buf_r[1][i] = 0;
        disp_buf_g[0][i] = 0;
        disp_buf_g[1][i] = 0;
    }
}

void send_data(uint8_t addr_y, uint32_t *data_r, uint32_t *data_g){
    uint32_t m = 0, n = 0;
    for(uint8_t i = 0; i < NUM_PANEL; i++){
        m = *data_r;
        n = *data_g;

        for(uint8_t j = 0; j < 32; j++){
            digitalWrite(CLK, LOW);
            digitalWrite(DG, LOW);
            digitalWrite(DR, LOW);

            if((m & 0x80000000) != 0){
                digitalWrite(DR, HIGH);
            }
            if((n & 0x80000000) != 0){
                digitalWrite(DG, HIGH);
            }

            m <<= 1;
            n <<= 1;

            digitalWrite(CLK, HIGH);
        }
        data_r++;
        data_g++;
    }
    digitalWrite(CLK, LOW);
    for(uint8_t i = 0; i < 4; i++){
        digitalWrite(addr[i], (addr_y >> i) & 0x01);
    }
    digitalWrite(ALE, HIGH);
    digitalWrite(WE, HIGH);
    digitalWrite(WE, LOW);
    digitalWrite(ALE, LOW);
}

bool scan(){
    for(uint8_t i = 0; i < 16; i++){
        if(disp_buf_r[0][i]  || disp_buf_r[1][i] || disp_buf_g[0][i] || disp_buf_g[1][i]){
            return true;
        }
    }
    return false;
}

void slideTxt(char *str, uint8_t *color, uint16_t interval){

    bool isEnter = false;
    uint8_t cnt = 0, enterCnt = 0;

    while(1){

        byte font[8] = {0};

        if(!isEnter){
            if(*str == 0x00){
                if(!scan()){
                    return;
                }
                for(uint8_t j = 0; j < 8; j++){
                    font[j] = 0;
                }
            }else if(*str == '\n'){
                isEnter = true;
                enterCnt = cnt;
                str++;
            }else{
                str = getFontData(font, str);
            }
        }


        for(uint8_t j = 0; j < FONT_SIZE; j++){

            for(uint8_t k = 0; k < FONT_SIZE; k++){
                uint32_t tmp[4] = {0};

                for(uint8_t l = 0; l < 4; l++){
                    uint8_t panel = 0;
                    uint8_t y = 32 - l * FONT_SIZE - FONT_SIZE;

                    if(y >= 16){
                        panel = 1;
                        y -= 16;
                    }
                    if((y / 8) % 2){
                        tmp[0] = disp_buf_r[panel][k + y] & 0x80000000;
                        tmp[1] = disp_buf_g[panel][k + y] & 0x80000000;
                        disp_buf_r[panel][k + y] <<= 1;
                        disp_buf_g[panel][k + y] <<= 1;
                        if(panel < 1){
                            disp_buf_r[panel][k + y] |= tmp[2];
                            disp_buf_g[panel][k + y] |= tmp[3];
                        }
                    }else{
                        if(panel > 0){
                            tmp[2] = disp_buf_r[panel][k + y] & 0x00000001;
                            tmp[3] = disp_buf_g[panel][k + y] & 0x00000001;
                        }
                        disp_buf_r[panel][k + y] >>= 1;
                        disp_buf_g[panel][k + y] >>= 1;
                        disp_buf_r[panel][k + y] |= tmp[0];
                        disp_buf_g[panel][k + y] |= tmp[1];
                    }
                }

                if(isEnter){
                    if(enterCnt - cnt > 1){
                        isEnter = false;
                        cnt--;
                        continue;
                    }else{
                        disp_buf_r[1][k + 8] |= 0;
                        disp_buf_g[1][k + 8] |= 0;
                    }
                }else{
                    switch (color[cnt])
                    {
                        case 2:
                            disp_buf_r[1][k + 8] |= font[k] >> (FONT_SIZE - j);
                            break;
                        case 1:
                            disp_buf_g[1][k + 8] |= font[k] >> (FONT_SIZE - j);
                            break;
                        default:
                            disp_buf_g[1][k + 8] |= font[k] >> (FONT_SIZE - j);
                            disp_buf_r[1][k + 8] |= font[k] >> (FONT_SIZE - j);
                            break;
                    }
                }
            }

            uint32_t m[NUM_PANEL], n[NUM_PANEL];

            for(uint8_t j = 0; j < 16; j++){
                m[0] = disp_buf_r[0][j];
                m[1] = disp_buf_r[1][j];
                n[0] = disp_buf_g[0][j];
                n[1] = disp_buf_g[1][j];
                send_data(j, m, n);
            }

            delay(interval / FONT_SIZE);
        }

        if(isEnter){
            enterCnt++;
        }else{
            cnt++;
        }
    }
}

void setup(){
    Serial.begin(9600);
    for(uint8_t i = 2; i < 13; i++){
        pinMode(i, OUTPUT);
        digitalWrite(i, LOW);
    }
}

void loop(){

    clear();

    char *str1 = "ようこそ！電気科展へ。\n今年のラインナップは、ゲーミングリレーでんたくや、ニキシー管時計などもりだくさん。\nぜひご覧くださいね！";
    uint8_t color1[] = {2,2,2,2,2,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};

    slideTxt(str1, color1, 250);
    uint32_t m[NUM_PANEL], n[NUM_PANEL];
    //鳥が降下、獲物を補足
    for(uint8_t i = 0; i < 16; i++){
        for(uint8_t j = 0; j < 16; j++){
            m[0] = pgm_read_dword(&swim[i%6][0][j]);
            uint32_t tmp = (j+16-i > 13) ? 0x00 : pgm_read_dword(&bird[i%2][0][j+16-i]);
            m[0] |= tmp >> 16 - i;
            m[1] = pgm_read_dword(&swim[i%6][0][j+16]);
            n[0] = pgm_read_dword(&swim[i%6][1][j]);
            tmp = (j+16-i > 13) ? 0x00 : pgm_read_dword(&bird[i%2][1][j+16-i]);
            n[0] |= tmp >> 16 - i;
            n[1] = pgm_read_dword(&swim[i%6][1][j+16]);
            send_data(j, m, n);
        }
        delay(100);
    }
    //獲物を吊り上げ
    for(uint8_t i = 0; i < 24; i++){
        for(uint8_t j = 0; j < 16; j++){
            m[0] = pgm_read_dword(&basyo[i%2][0][j]);
            m[1] = pgm_read_dword(&basyo[i%2][0][j+16]);
            n[0] = pgm_read_dword(&basyo[i%2][1][j]);
            uint32_t tmp = (j-i < 0) ? 0x00 : pgm_read_dword(&swim[i%6][1][j-i]);
            tmp ^= (j-i < 0) ? 0x00 : pgm_read_dword(&swim[i%6][0][j-i]);
            n[0] |= tmp;
            n[1] = pgm_read_dword(&basyo[i%2][1][j+16]);
            tmp = (j+16-i < 0) ? 0x00 : pgm_read_dword(&swim[i%6][1][j+16-i]);
            tmp ^= (j+16-i < 0) ? 0x00 : pgm_read_dword(&swim[i%6][0][j+16-i]);
            n[1] |= tmp;
            send_data(j, m, n);
        }
        delay(100);
    }
    //そのまま彼方へ飛んで行く
    for(uint8_t i = 0; i < 32; i++){
        for(uint8_t j = 0; j < 16; j++){
            uint32_t tmp = (j+i < 32) ? pgm_read_dword(&basyo[i%2][0][j+i]) : 0x00;
            m[0] = tmp << i;
            tmp = (j+16+i < 32) ? pgm_read_dword(&basyo[i%2][0][j+i+16]) : 0x00;
            m[1] = tmp << i;
            tmp = (j+i < 32) ? pgm_read_dword(&basyo[i%2][1][j+i]) : 0x00;
            n[0] = tmp << i;
            tmp = (j+16+i < 32) ? pgm_read_dword(&basyo[i%2][1][j+i+16]) : 0x00;
            n[1] = tmp << i;
            send_data(j, m, n);
        }
        delay(100);
    }
    //お墓登場
    for(uint8_t i = 1; i < 33; i++){
        for(uint8_t j = 0; j < 16; j++){
            m[0] = (j-32+i < 0) ? 0x00 : pgm_read_dword(&ohaka[0][0][j-32+i]);
            m[1] = (j-16+i < 0) ? 0x00 : pgm_read_dword(&ohaka[0][0][j-16+i]);
            n[0] = (j-32+i < 0) ? 0x00 : pgm_read_dword(&ohaka[0][1][j-32+i]);
            n[1] = (j-16+i < 0) ? 0x00 : pgm_read_dword(&ohaka[0][1][j-16+i]);
            send_data(j, m, n);
        }
        delay(100);
    }
    //お墓の横で舞踊るﾊﾞｼｮｳ
    for(uint8_t i = 0; i < 20; i++){
        for(uint8_t j = 0; j < 16; j++){
            m[0] = pgm_read_dword(&ohaka[i%2][0][j]);
            m[1] = pgm_read_dword(&ohaka[i%2][0][j+16]);
            n[0] = pgm_read_dword(&ohaka[i%2][1][j]);
            n[1] = pgm_read_dword(&ohaka[i%2][1][j+16]);
            send_data(j, m, n);
        }
        delay(200);
    }
    //現れざる者が現れ...！？
    for(uint8_t i = 0; i < 32; i++){
        for(uint8_t j = 0; j < 16; j++){
            uint32_t tmp = pgm_read_dword(&kabocha[i%2][0][j]);
            tmp >>= 32 - i;
            m[0] = pgm_read_dword(&ohaka[i%2][0][j]) << i;
            m[0] |= tmp;
            tmp = pgm_read_dword(&kabocha[i%2][0][j+16]);
            tmp >>= 32 - i;
            m[1] = pgm_read_dword(&ohaka[i%2][0][j+16]) << i;
            m[1] |= tmp;
            tmp = pgm_read_dword(&kabocha[i%2][1][j]);
            tmp >>= 32 - i;
            n[0] = pgm_read_dword(&ohaka[i%2][1][j]) << i;
            n[0] |= tmp;
            tmp = pgm_read_dword(&kabocha[i%2][1][j+16]);
            tmp >>= 32 - i;
            n[1] = pgm_read_dword(&ohaka[i%2][1][j+16]) << i;
            n[1] |= tmp;
            send_data(j, m, n);
        }
        delay(200);
    }
    //われらと共に踊る
    for(uint8_t i = 0; i < 48; i++){
        if(i % 4 == 1)
            delay(100);
        for(uint8_t j = 0; j < 16; j++){
            m[0] = pgm_read_dword(&kabocha[i%4][0][j]);
            m[1] = pgm_read_dword(&kabocha[i%4][0][j+16]);
            n[0] = pgm_read_dword(&kabocha[i%4][1][j]);
            n[1] = pgm_read_dword(&kabocha[i%4][1][j+16]);
            send_data(j, m, n);
        }
        delay(100);
    }
    //退場、終幕
    for(uint8_t i = 1; i < 33; i++){
        for(uint8_t j = 0; j < 16; j++){
            m[0] = (j+i < 32) ? pgm_read_dword(&kabocha[0][0][j+i]) : 0x00;
            m[1] = (j+16+i < 32) ? pgm_read_dword(&kabocha[0][0][j+i+16]) : 0x00;
            n[0] = (j+i < 32) ? pgm_read_dword(&kabocha[0][1][j+i]) : 0x00;
            n[1] = (j+16+i < 32) ? pgm_read_dword(&kabocha[0][1][j+i+16]) : 0x00;
            send_data(j, m, n);
        }
        delay(100);
    }

    char *str2 = "ハッピー！\nハロウィーーーン！！";
    uint8_t color2[20] = {1,1,1,1,1};
    slideTxt(str2, color2, 300);
    
    delay(500);

}